package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.46

import (
	"context"
	"fmt"

	"github.com/bclswl0827/openstation/driver/dao/table"
	"github.com/bclswl0827/openstation/driver/tle"
	"github.com/bclswl0827/openstation/graph/model"
	"github.com/bclswl0827/openstation/utils/duration"
)

// AddTLEs is the resolver for the AddTLEs field.
func (r *mutationResolver) AddTLEs(ctx context.Context, tleData []*model.TLEDataInput) ([]*model.TLEData, error) {
	panic(fmt.Errorf("not implemented: AddTLEs - AddTLEs"))
}

// DeleteTLEByID is the resolver for the DeleteTLEById field.
func (r *mutationResolver) DeleteTLEByID(ctx context.Context, id *int) (*bool, error) {
	panic(fmt.Errorf("not implemented: DeleteTLEByID - DeleteTLEById"))
}

// UpdateTLEByID is the resolver for the UpdateTLEById field.
func (r *mutationResolver) UpdateTLEByID(ctx context.Context, id int, tleData model.TLEDataInput) (*bool, error) {
	panic(fmt.Errorf("not implemented: UpdateTLEByID - UpdateTLEById"))
}

// GetAllTLEs is the resolver for the GetAllTLEs field.
func (r *queryResolver) GetAllTLEs(ctx context.Context) ([]*model.TLEData, error) {
	var (
		tleModel   table.SatelliteTLE
		tleRecords []table.SatelliteTLE
		tleData    []*model.TLEData
	)

	err := r.Database.
		Table(tleModel.GetName()).
		Find(&tleRecords).
		Error
	if err != nil {
		return nil, err
	}

	if tleRecords == nil {
		return nil, fmt.Errorf("no TLE records found")
	}

	currentTime, _ := duration.GetOffsetTime(r.RTCTime.TimeOffset)
	for _, tleRecord := range tleRecords {
		HasExpired := currentTime.Add(tle.EXPIRATION_DAYS).UnixMilli() > int64(tleRecord.LastUpdate)
		tleData = append(tleData, &model.TLEData{
			ID:         int(tleRecord.ID),
			Name:       tleRecord.Name,
			Line1:      tleRecord.Line_1,
			Line2:      tleRecord.Line_2,
			HasExpired: HasExpired,
			UpdatedAt:  int(tleRecord.LastUpdate),
		})
	}

	return tleData, nil
}

// GetTLEByID is the resolver for the GetTLEById field.
func (r *queryResolver) GetTLEByID(ctx context.Context, id *int) ([]*model.TLEData, error) {
	var (
		tleModel   table.SatelliteTLE
		tleRecords []table.SatelliteTLE
		tleData    []*model.TLEData
	)

	err := r.Database.
		Table(tleModel.GetName()).
		Where("id = ?", *id).
		Find(&tleRecords).
		Error
	if err != nil {
		return nil, err
	}

	if tleRecords == nil {
		return nil, fmt.Errorf("no TLE records found")
	}

	currentTime, _ := duration.GetOffsetTime(r.RTCTime.TimeOffset)
	for _, tleRecord := range tleRecords {
		HasExpired := currentTime.Add(tle.EXPIRATION_DAYS).UnixMilli() > int64(tleRecord.LastUpdate)
		tleData = append(tleData, &model.TLEData{
			ID:         int(tleRecord.ID),
			Name:       tleRecord.Name,
			Line1:      tleRecord.Line_1,
			Line2:      tleRecord.Line_2,
			HasExpired: HasExpired,
			UpdatedAt:  int(tleRecord.LastUpdate),
		})
	}

	return tleData, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
